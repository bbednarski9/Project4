
SRAM1.elf:     file format elf32-littlenios2
SRAM1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000804 memsz 0x00000804 flags r-x
    LOAD off    0x00001824 vaddr 0x00000824 paddr 0x00000894 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001904 vaddr 0x00000904 paddr 0x00000904 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001894  2**0
                  CONTENTS
  2 .text         0000077c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000088  0000079c  0000079c  0000179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00000824  00000894  00001824  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00000904  00000904  00001904  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00000910  00000910  00001894  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000288  00000000  00000000  000018b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001c89  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e17  00000000  00000000  000037c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000eef  00000000  00000000  000045e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000038c  00000000  00000000  000054d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000a1d  00000000  00000000  0000585c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007c5  00000000  00000000  00006279  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00006a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000c0  00000000  00000000  00006a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007bdb  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00007bde  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007be1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007be2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00007be3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00007bec  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00007bf5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00007bfe  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001f  00000000  00000000  00007c02  2**0
                  CONTENTS, READONLY
 26 .jdi          000033ad  00000000  00000000  00007c21  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004646c  00000000  00000000  0000afce  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
0000079c l    d  .rodata	00000000 .rodata
00000824 l    d  .rwdata	00000000 .rwdata
00000904 l    d  .bss	00000000 .bss
00000910 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SRAM1_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000618 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000648 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000002bc g     F .text	0000002c alt_main
00000894 g       *ABS*	00000000 __flash_rwdata_start
0000049c g     F .text	00000038 alt_putstr
0000087c g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000908 g     O .bss	00000004 alt_argv
0000887c g       *ABS*	00000000 _gp
000004d4 g     F .text	00000004 usleep
00000824 g     O .rwdata	00000030 alt_fd_list
000004fc g     F .text	0000005c altera_avalon_jtag_uart_read
00000764 g     F .text	00000008 .hidden __udivsi3
00000880 g     O .rwdata	00000004 alt_max_fd
00000910 g       *ABS*	00000000 __bss_end
00000180 g     F .text	00000044 alt_getchar
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000854 g     O .rwdata	00000028 alt_dev_null
00000614 g     F .text	00000004 alt_dcache_flush_all
00000894 g       *ABS*	00000000 __ram_rwdata_end
00000884 g     O .rwdata	00000008 alt_dev_list
00000824 g       *ABS*	00000000 __ram_rodata_end
0000076c g     F .text	00000008 .hidden __umodsi3
00000910 g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
00000558 g     F .text	00000034 altera_avalon_jtag_uart_write
000002e8 g     F .text	0000016c alt_printf
00000020 g     F .text	0000003c _start
000004f8 g     F .text	00000004 alt_sys_init
00000774 g     F .text	00000028 .hidden __mulsi3
00000824 g       *ABS*	00000000 __ram_rwdata_start
0000079c g       *ABS*	00000000 __ram_rodata_start
0000058c g     F .text	00000088 alt_busy_sleep
00000910 g       *ABS*	00000000 __alt_stack_base
00000904 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000124 main
00000904 g     O .bss	00000004 alt_envp
000006b4 g     F .text	00000054 .hidden __divsi3
0000079c g       *ABS*	00000000 __flash_rodata_start
000004d8 g     F .text	00000020 alt_irq_init
0000090c g     O .bss	00000004 alt_argc
0000088c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000894 g       *ABS*	00000000 _edata
00000910 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000624 g     F .text	00000008 altera_nios2_qsys_irq_init
00000708 g     F .text	0000005c .hidden __modsi3
00001000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
0000062c g     F .text	0000001c strlen
00000454 g     F .text	00000048 alt_putchar
00000620 g     F .text	00000004 alt_icache_flush_all
000001c4 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a21f14 	ori	gp,gp,34940
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10824114 	ori	r2,r2,2308

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c24414 	ori	r3,r3,2320

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff77c8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00001c40 	call	1c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00002bc0 	call	2bc <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff77dc>

0000005c <main>:
#define address (volatile char *)  	 0x2010
#define data (volatile char *) 		 0x2000
#define readWrite (volatile char *)  0x2030


 int main() {
  5c:	defffc04 	addi	sp,sp,-16
  60:	dfc00315 	stw	ra,12(sp)
  64:	dc800215 	stw	r18,8(sp)
  68:	dc400115 	stw	r17,4(sp)
  6c:	dc000015 	stw	r16,0(sp)
	char input = 'A';
	int i;
	int j;
	//*enable = 0x0F;
	while (input != 'E') {
		alt_putstr("\nTo READ type 'R' and press enter.\n");
  70:	01000034 	movhi	r4,0
  74:	2101e704 	addi	r4,r4,1948
  78:	000049c0 	call	49c <alt_putstr>
		alt_putstr("\nTo WRITE type 'W' and press enter.\n");
  7c:	01000034 	movhi	r4,0
  80:	2101f004 	addi	r4,r4,1984
  84:	000049c0 	call	49c <alt_putstr>
		alt_putstr("\nTo exit the program, enter 'E'\n");
  88:	01000034 	movhi	r4,0
  8c:	2101fa04 	addi	r4,r4,2024
  90:	000049c0 	call	49c <alt_putstr>
		input = alt_getchar();
  94:	00001800 	call	180 <alt_getchar>
		//scanf("%c", &input);
		// input = getchar();

		if (input == 'R') {
  98:	10803fcc 	andi	r2,r2,255
  9c:	1080201c 	xori	r2,r2,128
  a0:	10bfe004 	addi	r2,r2,-128
  a4:	00c01484 	movi	r3,82
  a8:	10c01a1e 	bne	r2,r3,114 <main+0xb8>
			*enable = 0x00;
  ac:	00880804 	movi	r2,8224
  b0:	10000005 	stb	zero,0(r2)
			*readWrite = 0x0F; // read
  b4:	00c003c4 	movi	r3,15
  b8:	00880c04 	movi	r2,8240
  bc:	10c00005 	stb	r3,0(r2)
			for (j = 0; j < 127; j = j + 1) {
  c0:	0021883a 	mov	r16,zero
				usleep(100000);
				(*address) = j;
  c4:	04880404 	movi	r18,8208
				*leds = *data;
  c8:	04480004 	movi	r17,8192

		if (input == 'R') {
			*enable = 0x00;
			*readWrite = 0x0F; // read
			for (j = 0; j < 127; j = j + 1) {
				usleep(100000);
  cc:	010000b4 	movhi	r4,2
  d0:	2121a804 	addi	r4,r4,-31072
  d4:	00004d40 	call	4d4 <usleep>
				(*address) = j;
  d8:	94000005 	stb	r16,0(r18)
				*leds = *data;
  dc:	88c00003 	ldbu	r3,0(r17)
  e0:	00881004 	movi	r2,8256

				alt_printf("sad%h   ", *data);
  e4:	01000034 	movhi	r4,0
			*enable = 0x00;
			*readWrite = 0x0F; // read
			for (j = 0; j < 127; j = j + 1) {
				usleep(100000);
				(*address) = j;
				*leds = *data;
  e8:	10c00005 	stb	r3,0(r2)

				alt_printf("sad%h   ", *data);
  ec:	89400003 	ldbu	r5,0(r17)
  f0:	21020304 	addi	r4,r4,2060
		// input = getchar();

		if (input == 'R') {
			*enable = 0x00;
			*readWrite = 0x0F; // read
			for (j = 0; j < 127; j = j + 1) {
  f4:	84000044 	addi	r16,r16,1
				usleep(100000);
				(*address) = j;
				*leds = *data;

				alt_printf("sad%h   ", *data);
  f8:	29403fcc 	andi	r5,r5,255
  fc:	2940201c 	xori	r5,r5,128
 100:	297fe004 	addi	r5,r5,-128
 104:	00002e80 	call	2e8 <alt_printf>
		// input = getchar();

		if (input == 'R') {
			*enable = 0x00;
			*readWrite = 0x0F; // read
			for (j = 0; j < 127; j = j + 1) {
 108:	00801fc4 	movi	r2,127
 10c:	80bfef1e 	bne	r16,r2,cc <_gp+0xffff7850>
 110:	003fd706 	br	70 <_gp+0xffff77f4>

				alt_printf("sad%h   ", *data);
			}


		} else if (input == 'W') {
 114:	00c015c4 	movi	r3,87
 118:	10c0101e 	bne	r2,r3,15c <main+0x100>
			*enable = 0x0F;
 11c:	00c003c4 	movi	r3,15
 120:	00880804 	movi	r2,8224
 124:	10c00005 	stb	r3,0(r2)
			*readWrite = 0x0; // write
 128:	00880c04 	movi	r2,8240
 12c:	10000005 	stb	zero,0(r2)
			*address = 0x0;
 130:	00880404 	movi	r2,8208
 134:	10000005 	stb	zero,0(r2)
			for (i = 127; i > 0; i = i - 1) {
 138:	00c01fc4 	movi	r3,127
				*data = i;
 13c:	01480004 	movi	r5,8192
 140:	28c00005 	stb	r3,0(r5)
				(*address) += 1;
 144:	11000003 	ldbu	r4,0(r2)

		} else if (input == 'W') {
			*enable = 0x0F;
			*readWrite = 0x0; // write
			*address = 0x0;
			for (i = 127; i > 0; i = i - 1) {
 148:	18ffffc4 	addi	r3,r3,-1
				*data = i;
				(*address) += 1;
 14c:	21000044 	addi	r4,r4,1
 150:	11000005 	stb	r4,0(r2)

		} else if (input == 'W') {
			*enable = 0x0F;
			*readWrite = 0x0; // write
			*address = 0x0;
			for (i = 127; i > 0; i = i - 1) {
 154:	183ffa1e 	bne	r3,zero,140 <_gp+0xffff78c4>
 158:	003fc506 	br	70 <_gp+0xffff77f4>
 int main() {
	char input = 'A';
	int i;
	int j;
	//*enable = 0x0F;
	while (input != 'E') {
 15c:	00c01144 	movi	r3,69
 160:	10ffc31e 	bne	r2,r3,70 <_gp+0xffff77f4>
			}
		}
	}

	return 0;
}
 164:	0005883a 	mov	r2,zero
 168:	dfc00317 	ldw	ra,12(sp)
 16c:	dc800217 	ldw	r18,8(sp)
 170:	dc400117 	ldw	r17,4(sp)
 174:	dc000017 	ldw	r16,0(sp)
 178:	dec00404 	addi	sp,sp,16
 17c:	f800283a 	ret

00000180 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 180:	00800034 	movhi	r2,0
 184:	10820904 	addi	r2,r2,2084
 188:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 18c:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 190:	01000034 	movhi	r4,0
 194:	21021f04 	addi	r4,r4,2172
 198:	d80b883a 	mov	r5,sp
 19c:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 1a0:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 1a4:	00004fc0 	call	4fc <altera_avalon_jtag_uart_read>
 1a8:	0080020e 	bge	zero,r2,1b4 <alt_getchar+0x34>
        return -1;
    }
    return c;
 1ac:	d8800007 	ldb	r2,0(sp)
 1b0:	00000106 	br	1b8 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
 1b4:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	dec00204 	addi	sp,sp,8
 1c0:	f800283a 	ret

000001c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1c4:	deffff04 	addi	sp,sp,-4
 1c8:	01000034 	movhi	r4,0
 1cc:	01400034 	movhi	r5,0
 1d0:	dfc00015 	stw	ra,0(sp)
 1d4:	21020904 	addi	r4,r4,2084
 1d8:	29422504 	addi	r5,r5,2196

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1dc:	2140061e 	bne	r4,r5,1f8 <alt_load+0x34>
 1e0:	01000034 	movhi	r4,0
 1e4:	01400034 	movhi	r5,0
 1e8:	21000804 	addi	r4,r4,32
 1ec:	29400804 	addi	r5,r5,32
 1f0:	2140141e 	bne	r4,r5,244 <alt_load+0x80>
 1f4:	00000d06 	br	22c <alt_load+0x68>
 1f8:	00c00034 	movhi	r3,0
 1fc:	18c22504 	addi	r3,r3,2196
 200:	00bfff04 	movi	r2,-4
 204:	1907c83a 	sub	r3,r3,r4
 208:	1886703a 	and	r3,r3,r2
 20c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 210:	10fff326 	beq	r2,r3,1e0 <_gp+0xffff7964>
 214:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 218:	39c00017 	ldw	r7,0(r7)
 21c:	110d883a 	add	r6,r2,r4
 220:	10800104 	addi	r2,r2,4
 224:	31c00015 	stw	r7,0(r6)
 228:	003ff906 	br	210 <_gp+0xffff7994>
 22c:	01000034 	movhi	r4,0
 230:	01400034 	movhi	r5,0
 234:	2101e704 	addi	r4,r4,1948
 238:	2941e704 	addi	r5,r5,1948

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 23c:	2140121e 	bne	r4,r5,288 <alt_load+0xc4>
 240:	00000d06 	br	278 <alt_load+0xb4>
 244:	00c00034 	movhi	r3,0
 248:	18c00804 	addi	r3,r3,32
 24c:	00bfff04 	movi	r2,-4
 250:	1907c83a 	sub	r3,r3,r4
 254:	1886703a 	and	r3,r3,r2
 258:	0005883a 	mov	r2,zero
  {
    while( to != end )
 25c:	10fff326 	beq	r2,r3,22c <_gp+0xffff79b0>
 260:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 264:	39c00017 	ldw	r7,0(r7)
 268:	110d883a 	add	r6,r2,r4
 26c:	10800104 	addi	r2,r2,4
 270:	31c00015 	stw	r7,0(r6)
 274:	003ff906 	br	25c <_gp+0xffff79e0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 278:	00006140 	call	614 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 27c:	dfc00017 	ldw	ra,0(sp)
 280:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 284:	00006201 	jmpi	620 <alt_icache_flush_all>
 288:	00c00034 	movhi	r3,0
 28c:	18c20904 	addi	r3,r3,2084
 290:	00bfff04 	movi	r2,-4
 294:	1907c83a 	sub	r3,r3,r4
 298:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 29c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2a0:	10fff526 	beq	r2,r3,278 <_gp+0xffff79fc>
 2a4:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 2a8:	39c00017 	ldw	r7,0(r7)
 2ac:	110d883a 	add	r6,r2,r4
 2b0:	10800104 	addi	r2,r2,4
 2b4:	31c00015 	stw	r7,0(r6)
 2b8:	003ff906 	br	2a0 <_gp+0xffff7a24>

000002bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2bc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2c0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2c4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2c8:	00004d80 	call	4d8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2cc:	00004f80 	call	4f8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2d0:	d1202417 	ldw	r4,-32624(gp)
 2d4:	d1602317 	ldw	r5,-32628(gp)
 2d8:	d1a02217 	ldw	r6,-32632(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 2dc:	dfc00017 	ldw	ra,0(sp)
 2e0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2e4:	000005c1 	jmpi	5c <main>

000002e8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 2e8:	defff204 	addi	sp,sp,-56
 2ec:	dfc00a15 	stw	ra,40(sp)
 2f0:	df000915 	stw	fp,36(sp)
 2f4:	ddc00815 	stw	r23,32(sp)
 2f8:	dd800715 	stw	r22,28(sp)
 2fc:	dd400615 	stw	r21,24(sp)
 300:	dd000515 	stw	r20,20(sp)
 304:	dcc00415 	stw	r19,16(sp)
 308:	dc800315 	stw	r18,12(sp)
 30c:	dc400215 	stw	r17,8(sp)
 310:	dc000115 	stw	r16,4(sp)
 314:	d9400b15 	stw	r5,44(sp)
 318:	d9800c15 	stw	r6,48(sp)
 31c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 320:	04000944 	movi	r16,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 324:	2005883a 	mov	r2,r4
	va_list args;
	va_start(args, fmt);
 328:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 32c:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 330:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 334:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 338:	11000007 	ldb	r4,0(r2)
 33c:	20003926 	beq	r4,zero,424 <alt_printf+0x13c>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 340:	24000226 	beq	r4,r16,34c <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 344:	14400044 	addi	r17,r2,1
 348:	00001106 	br	390 <alt_printf+0xa8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 34c:	14400084 	addi	r17,r2,2
 350:	10800047 	ldb	r2,1(r2)
 354:	10003326 	beq	r2,zero,424 <alt_printf+0x13c>
            {
                if (c == '%')
 358:	1400021e 	bne	r2,r16,364 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 35c:	8009883a 	mov	r4,r16
 360:	00000b06 	br	390 <alt_printf+0xa8>
                } 
                else if (c == 'c')
 364:	1480051e 	bne	r2,r18,37c <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 368:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 36c:	ad800104 	addi	r22,r21,4
 370:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
 374:	00004540 	call	454 <alt_putchar>
 378:	00002806 	br	41c <alt_printf+0x134>
                }
                else if (c == 'x')
 37c:	14c01f1e 	bne	r2,r19,3fc <alt_printf+0x114>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 380:	adc00017 	ldw	r23,0(r21)
 384:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 388:	b800031e 	bne	r23,zero,398 <alt_printf+0xb0>
                    {
                        alt_putchar('0');
 38c:	01000c04 	movi	r4,48
 390:	00004540 	call	454 <alt_putchar>
                        continue;
 394:	00002106 	br	41c <alt_printf+0x134>
 398:	05800704 	movi	r22,28
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 39c:	00c003c4 	movi	r3,15
 3a0:	1d84983a 	sll	r2,r3,r22
 3a4:	15c4703a 	and	r2,r2,r23
 3a8:	1000021e 	bne	r2,zero,3b4 <alt_printf+0xcc>
                        digit_shift -= 4;
 3ac:	b5bfff04 	addi	r22,r22,-4
 3b0:	003ffb06 	br	3a0 <_gp+0xffff7b24>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 3b4:	070003c4 	movi	fp,15
                        if (digit <= 9)
 3b8:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 3bc:	b0001716 	blt	r22,zero,41c <alt_printf+0x134>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 3c0:	e584983a 	sll	r2,fp,r22
 3c4:	15c4703a 	and	r2,r2,r23
 3c8:	1584d83a 	srl	r2,r2,r22
                        if (digit <= 9)
 3cc:	18800236 	bltu	r3,r2,3d8 <alt_printf+0xf0>
                            c = '0' + digit;
 3d0:	11000c04 	addi	r4,r2,48
 3d4:	00000106 	br	3dc <alt_printf+0xf4>
                        else
                            c = 'a' + digit - 10;
 3d8:	110015c4 	addi	r4,r2,87
                        alt_putchar(c);
 3dc:	21003fcc 	andi	r4,r4,255
 3e0:	2100201c 	xori	r4,r4,128
 3e4:	213fe004 	addi	r4,r4,-128
 3e8:	d8c00015 	stw	r3,0(sp)
 3ec:	00004540 	call	454 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 3f0:	b5bfff04 	addi	r22,r22,-4
 3f4:	d8c00017 	ldw	r3,0(sp)
 3f8:	003ff006 	br	3bc <_gp+0xffff7b40>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 3fc:	1500071e 	bne	r2,r20,41c <alt_printf+0x134>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 400:	ad800017 	ldw	r22,0(r21)
 404:	ad400104 	addi	r21,r21,4

                    while(*s)
 408:	b1000007 	ldb	r4,0(r22)
 40c:	20000326 	beq	r4,zero,41c <alt_printf+0x134>
                      alt_putchar(*s++);
 410:	b5800044 	addi	r22,r22,1
 414:	00004540 	call	454 <alt_putchar>
 418:	003ffb06 	br	408 <_gp+0xffff7b8c>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 41c:	8805883a 	mov	r2,r17
 420:	003fc506 	br	338 <_gp+0xffff7abc>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 424:	dfc00a17 	ldw	ra,40(sp)
 428:	df000917 	ldw	fp,36(sp)
 42c:	ddc00817 	ldw	r23,32(sp)
 430:	dd800717 	ldw	r22,28(sp)
 434:	dd400617 	ldw	r21,24(sp)
 438:	dd000517 	ldw	r20,20(sp)
 43c:	dcc00417 	ldw	r19,16(sp)
 440:	dc800317 	ldw	r18,12(sp)
 444:	dc400217 	ldw	r17,8(sp)
 448:	dc000117 	ldw	r16,4(sp)
 44c:	dec00e04 	addi	sp,sp,56
 450:	f800283a 	ret

00000454 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 454:	defffd04 	addi	sp,sp,-12
 458:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 45c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 460:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 464:	01000034 	movhi	r4,0
 468:	21021f04 	addi	r4,r4,2172
 46c:	d80b883a 	mov	r5,sp
 470:	01800044 	movi	r6,1
 474:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 478:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 47c:	00005580 	call	558 <altera_avalon_jtag_uart_write>
 480:	00ffffc4 	movi	r3,-1
 484:	10c00126 	beq	r2,r3,48c <alt_putchar+0x38>
        return -1;
    }
    return c;
 488:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 48c:	dfc00217 	ldw	ra,8(sp)
 490:	dc000117 	ldw	r16,4(sp)
 494:	dec00304 	addi	sp,sp,12
 498:	f800283a 	ret

0000049c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 49c:	defffe04 	addi	sp,sp,-8
 4a0:	dc000015 	stw	r16,0(sp)
 4a4:	dfc00115 	stw	ra,4(sp)
 4a8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 4ac:	000062c0 	call	62c <strlen>
 4b0:	01000034 	movhi	r4,0
 4b4:	21021f04 	addi	r4,r4,2172
 4b8:	800b883a 	mov	r5,r16
 4bc:	100d883a 	mov	r6,r2
 4c0:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 4c4:	dfc00117 	ldw	ra,4(sp)
 4c8:	dc000017 	ldw	r16,0(sp)
 4cc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 4d0:	00005581 	jmpi	558 <altera_avalon_jtag_uart_write>

000004d4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 4d4:	000058c1 	jmpi	58c <alt_busy_sleep>

000004d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4d8:	deffff04 	addi	sp,sp,-4
 4dc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 4e0:	00006240 	call	624 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4e4:	00800044 	movi	r2,1
 4e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4ec:	dfc00017 	ldw	ra,0(sp)
 4f0:	dec00104 	addi	sp,sp,4
 4f4:	f800283a 	ret

000004f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4f8:	f800283a 	ret

000004fc <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 4fc:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 500:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 504:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 508:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 50c:	11800b2e 	bgeu	r2,r6,53c <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 510:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 514:	1a60000c 	andi	r9,r3,32768
 518:	48000326 	beq	r9,zero,528 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 51c:	10c00005 	stb	r3,0(r2)
 520:	10800044 	addi	r2,r2,1
 524:	003ff906 	br	50c <_gp+0xffff7c90>
    else if (ptr != buffer)
 528:	11400226 	beq	r2,r5,534 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 52c:	1145c83a 	sub	r2,r2,r5
 530:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 534:	403ff526 	beq	r8,zero,50c <_gp+0xffff7c90>
 538:	00000106 	br	540 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 53c:	117ffb1e 	bne	r2,r5,52c <_gp+0xffff7cb0>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 540:	39d0000c 	andi	r7,r7,16384
 544:	3800021e 	bne	r7,zero,550 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 548:	00bffec4 	movi	r2,-5
 54c:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 550:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 554:	f800283a 	ret

00000558 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 558:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 55c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 560:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 564:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 568:	2980072e 	bgeu	r5,r6,588 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 56c:	38c00037 	ldwio	r3,0(r7)
 570:	18ffffec 	andhi	r3,r3,65535
 574:	183ffc26 	beq	r3,zero,568 <_gp+0xffff7cec>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 578:	28c00007 	ldb	r3,0(r5)
 57c:	20c00035 	stwio	r3,0(r4)
 580:	29400044 	addi	r5,r5,1
 584:	003ff806 	br	568 <_gp+0xffff7cec>

  return count;
}
 588:	f800283a 	ret

0000058c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 58c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 590:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 594:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 598:	dc000015 	stw	r16,0(sp)
 59c:	dfc00115 	stw	ra,4(sp)
 5a0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 5a4:	00007640 	call	764 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 5a8:	10001026 	beq	r2,zero,5ec <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5ac:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5b0:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 5b4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5b8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5bc:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5c0:	297fffc4 	addi	r5,r5,-1
 5c4:	283ffe1e 	bne	r5,zero,5c0 <_gp+0xffff7d44>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 5c8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5cc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 5d0:	18bffb16 	blt	r3,r2,5c0 <_gp+0xffff7d44>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 5d4:	8009883a 	mov	r4,r16
 5d8:	01400144 	movi	r5,5
 5dc:	00007740 	call	774 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 5e0:	10bfffc4 	addi	r2,r2,-1
 5e4:	103ffe1e 	bne	r2,zero,5e0 <_gp+0xffff7d64>
 5e8:	00000506 	br	600 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 5ec:	8009883a 	mov	r4,r16
 5f0:	01400144 	movi	r5,5
 5f4:	00007740 	call	774 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 5f8:	10bfffc4 	addi	r2,r2,-1
 5fc:	00bffe16 	blt	zero,r2,5f8 <_gp+0xffff7d7c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 600:	0005883a 	mov	r2,zero
 604:	dfc00117 	ldw	ra,4(sp)
 608:	dc000017 	ldw	r16,0(sp)
 60c:	dec00204 	addi	sp,sp,8
 610:	f800283a 	ret

00000614 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 614:	f800283a 	ret

00000618 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 618:	3005883a 	mov	r2,r6
 61c:	f800283a 	ret

00000620 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 620:	f800283a 	ret

00000624 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 624:	000170fa 	wrctl	ienable,zero
 628:	f800283a 	ret

0000062c <strlen>:
 62c:	2005883a 	mov	r2,r4
 630:	10c00007 	ldb	r3,0(r2)
 634:	18000226 	beq	r3,zero,640 <strlen+0x14>
 638:	10800044 	addi	r2,r2,1
 63c:	003ffc06 	br	630 <_gp+0xffff7db4>
 640:	1105c83a 	sub	r2,r2,r4
 644:	f800283a 	ret

00000648 <udivmodsi4>:
 648:	2900182e 	bgeu	r5,r4,6ac <udivmodsi4+0x64>
 64c:	28001716 	blt	r5,zero,6ac <udivmodsi4+0x64>
 650:	00800804 	movi	r2,32
 654:	00c00044 	movi	r3,1
 658:	00000206 	br	664 <udivmodsi4+0x1c>
 65c:	10001126 	beq	r2,zero,6a4 <udivmodsi4+0x5c>
 660:	28000516 	blt	r5,zero,678 <udivmodsi4+0x30>
 664:	294b883a 	add	r5,r5,r5
 668:	10bfffc4 	addi	r2,r2,-1
 66c:	18c7883a 	add	r3,r3,r3
 670:	293ffa36 	bltu	r5,r4,65c <_gp+0xffff7de0>
 674:	18000b26 	beq	r3,zero,6a4 <udivmodsi4+0x5c>
 678:	0005883a 	mov	r2,zero
 67c:	21400236 	bltu	r4,r5,688 <udivmodsi4+0x40>
 680:	2149c83a 	sub	r4,r4,r5
 684:	10c4b03a 	or	r2,r2,r3
 688:	1806d07a 	srli	r3,r3,1
 68c:	280ad07a 	srli	r5,r5,1
 690:	183ffa1e 	bne	r3,zero,67c <_gp+0xffff7e00>
 694:	3000011e 	bne	r6,zero,69c <udivmodsi4+0x54>
 698:	f800283a 	ret
 69c:	2005883a 	mov	r2,r4
 6a0:	f800283a 	ret
 6a4:	0005883a 	mov	r2,zero
 6a8:	003ffa06 	br	694 <_gp+0xffff7e18>
 6ac:	00c00044 	movi	r3,1
 6b0:	003ff106 	br	678 <_gp+0xffff7dfc>

000006b4 <__divsi3>:
 6b4:	defffe04 	addi	sp,sp,-8
 6b8:	dfc00115 	stw	ra,4(sp)
 6bc:	dc000015 	stw	r16,0(sp)
 6c0:	20000b16 	blt	r4,zero,6f0 <__divsi3+0x3c>
 6c4:	0021883a 	mov	r16,zero
 6c8:	28000c16 	blt	r5,zero,6fc <__divsi3+0x48>
 6cc:	000d883a 	mov	r6,zero
 6d0:	00006480 	call	648 <udivmodsi4>
 6d4:	0407c83a 	sub	r3,zero,r16
 6d8:	1884f03a 	xor	r2,r3,r2
 6dc:	1405883a 	add	r2,r2,r16
 6e0:	dfc00117 	ldw	ra,4(sp)
 6e4:	dc000017 	ldw	r16,0(sp)
 6e8:	dec00204 	addi	sp,sp,8
 6ec:	f800283a 	ret
 6f0:	0109c83a 	sub	r4,zero,r4
 6f4:	04000044 	movi	r16,1
 6f8:	283ff40e 	bge	r5,zero,6cc <_gp+0xffff7e50>
 6fc:	014bc83a 	sub	r5,zero,r5
 700:	8400005c 	xori	r16,r16,1
 704:	003ff106 	br	6cc <_gp+0xffff7e50>

00000708 <__modsi3>:
 708:	defffd04 	addi	sp,sp,-12
 70c:	dfc00215 	stw	ra,8(sp)
 710:	dc400115 	stw	r17,4(sp)
 714:	dc000015 	stw	r16,0(sp)
 718:	20000c16 	blt	r4,zero,74c <__modsi3+0x44>
 71c:	0023883a 	mov	r17,zero
 720:	0021883a 	mov	r16,zero
 724:	28000d16 	blt	r5,zero,75c <__modsi3+0x54>
 728:	01800044 	movi	r6,1
 72c:	00006480 	call	648 <udivmodsi4>
 730:	1404f03a 	xor	r2,r2,r16
 734:	8885883a 	add	r2,r17,r2
 738:	dfc00217 	ldw	ra,8(sp)
 73c:	dc400117 	ldw	r17,4(sp)
 740:	dc000017 	ldw	r16,0(sp)
 744:	dec00304 	addi	sp,sp,12
 748:	f800283a 	ret
 74c:	0109c83a 	sub	r4,zero,r4
 750:	04400044 	movi	r17,1
 754:	043fffc4 	movi	r16,-1
 758:	283ff30e 	bge	r5,zero,728 <_gp+0xffff7eac>
 75c:	014bc83a 	sub	r5,zero,r5
 760:	003ff106 	br	728 <_gp+0xffff7eac>

00000764 <__udivsi3>:
 764:	000d883a 	mov	r6,zero
 768:	00006481 	jmpi	648 <udivmodsi4>

0000076c <__umodsi3>:
 76c:	01800044 	movi	r6,1
 770:	00006481 	jmpi	648 <udivmodsi4>

00000774 <__mulsi3>:
 774:	0005883a 	mov	r2,zero
 778:	20000726 	beq	r4,zero,798 <__mulsi3+0x24>
 77c:	20c0004c 	andi	r3,r4,1
 780:	2008d07a 	srli	r4,r4,1
 784:	18000126 	beq	r3,zero,78c <__mulsi3+0x18>
 788:	1145883a 	add	r2,r2,r5
 78c:	294b883a 	add	r5,r5,r5
 790:	203ffa1e 	bne	r4,zero,77c <_gp+0xffff7f00>
 794:	f800283a 	ret
 798:	f800283a 	ret
